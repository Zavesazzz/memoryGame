const EMOJIS = ["ü•î", "üçí", "ü•ë", "üåΩ", "ü•ï", "üçá", "üçâ", "üçå", "ü•≠", "üçç"];


/**
 * 
 * @param {strings[]} items - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
 * @returns {strings[]} - –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
 */
function shuffleAndPickRandom(items) {
    if(items && Array.isArray(items)) {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const sortedArr = items.sort(() => Math.random(items) - 0.5);

        // –î–æ—Å—Ç–∞–µ–º –∏–∑ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–≤—ã–µ 8
        const dublicateArr = [...sortedArr].slice(0, 8);

        // –î—É–±–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const doubleArr = [...dublicateArr, ...dublicateArr];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        const sortedDoubleArr = doubleArr.sort(() => Math.random(doubleArr) - 0.5);

        return sortedDoubleArr;
    } else {
        throw new Error("–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞!")
    }
}

shuffleAndPickRandom(EMOJIS)

/**
 * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
 * @param {HTMLDivElement} card - –û—Ç–¥–µ–ª—å–Ω–æ –≤–∑—è—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
 */
const flipCard = (card) => {

}
/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @property {boolean} isGameStarted - –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ—Ç.
 * @property {number} totalTime - –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–≥—Ä–µ.
 * @property {number} flippedCards - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
 * @property {number} totalFlips - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
 */
const STATE = {
	isGameStarted: false,
	totalTime: 0,
	flippedCards: 0,
	totalFlips: 0,
};

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª—ã –∏–≥—Ä—ã
 * @property {HTMLDivElement} boardContainer - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
 * @property {HTMLDivElement} board - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è.
 * @property {HTMLDivElement} moves - –ö–æ–Ω—Ç—Ä–æ–ª –¥–ª—è —É—á–µ—Ç–∞ —à–∞–≥–æ–≤.
 * @property {HTMLDivElement} timer - –ö–æ–Ω—Ç—Ä–æ–ª –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.
 * @property {HTMLButtonElement} start - –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã.
 */
const SELECTORS = {
	boardContainer: document.querySelector(".board-container"),
	board: document.querySelector(".board"),
	moves: document.querySelector(".moves"),
	timer: document.querySelector(".timer"),
	start: document.querySelector("button"),
};

/**
 *
 */
const generateGame = () => {
	const dimensions = SELECTORS.board.dataset.dimension;

	if (dimensions % 2 !== 0) {
		throw new Error("–†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–Ω—ã–º");
	}

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ-—Ü–∏—é –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è emoji
    const shuffleEmoji = shuffleAndPickRandom(EMOJIS)

	// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
	const cardsHTML = shuffleEmoji.map((emoji) => {
		return `
                            <div class="card">
                                <div class="card-front"></div>
                                <div class="card-back">${emoji}</div>
                            </div>
                        `;
	}).join("");

	SELECTORS.board.insertAdjacentHTML("beforeend", cardsHTML);
};

/**
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π (–∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ)
 */
const attachEventListeners = () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ ( Need to fix )
    const cardsFront = SELECTORS.board.children.children(0);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ (card) —Ä–æ–¥–∏—Ç–µ–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardsCollection = SELECTORS.board.children;

    if (cardsCollection) {
        // HtmlCollection –≤ –º–∞—Å—Å–∏–≤
        [...cardsCollection].forEach((card) => {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤–∑—è—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            card.addEventListener("click", (event) => {
                const eventTarget = event.target;
                const eventParent = eventTarget.parentElement;

                if(eventParent.classList.contains("card") &&
                eventParent.className.includes("flipped")) 
                {
                    flipCard(eventParent)
                }
            });
        });
    }
};

/* –í—ã–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
document.addEventListener("DOMContentLoaded", () => {
    generateGame(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É
    attachEventListeners() // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
})
